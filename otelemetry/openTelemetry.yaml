apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: tracetestcollector
  annotations:
    linkerd.io/inject: enabled
spec:
  image: otel/opentelemetry-collector-contrib-dev:latest
  serviceAccount: otelcontribcol
  mode: daemonset
  hostNetwork: true
  ports:
    - name: metric
      port: 9090
      targetPort: 9090
      protocol: TCP
  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      opencensus:
      zipkin:
      jaeger:
        protocols:
          grpc:
          thrift_http:
          thrift_compact:
          thrift_binary:
    processors:
      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800

      memory_limiter:
         check_interval: 1s
         limit_percentage: 70
         spike_limit_percentage: 30


      resourcedetection/gce:
        detectors: [env, gce]
        timeout: 2s
        override: true

      k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        filter:
          node_from_env_var: K8S_NODE_NAME
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time

    exporters:


      logging:
        loglevel: debug

      otlp:
        endpoint: TEMP_SVC_TO_REPLACE.tempo.svc.cluster.local:4317
        tls:
          insecure: true

    extensions:
      memory_ballast:
        size_in_percentage: 20


    service:
      extensions: [memory_ballast]
      pipelines:
        traces:
          receivers: [otlp,opencensus,zipkin,jaeger]
          processors: [memory_limiter,batch]
          exporters: [otlp,logging]
        metrics:
          receivers: [otlp]
          processors: [memory_limiter,k8sattributes,resourcedetection/gce,batch]
          exporters: [otlp]